<!DOCTYPE html><html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Super Calculator</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/mathjs/lib/browser/math.min.js"></script>
  <style>
    :root {
      --bg-color: #0f0f0f;
      --primary-color: #1e1e1e;
      --accent-color: #00bfa6;
      --text-color: #ffffff;
      --hover-color: #2a2a2a;
    }
    * {
      box-sizing: border-box;
    }
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
    }
    .tabs {
      display: flex;
      overflow-x: auto;
      background-color: var(--primary-color);
      padding: 10px;
    }
    .tab {
      flex: 1;
      text-align: center;
      padding: 12px;
      cursor: pointer;
      color: #aaa;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
    }
    .tab.active {
      color: var(--accent-color);
      border-bottom: 3px solid var(--accent-color);
      background-color: #1b1b1b;
    }
    .section {
      display: none;
      padding: 20px;
    }
    .section.active {
      display: block;
    }
    input, select, textarea {
      background: #1c1c1c;
      color: #fff;
      border: 1px solid #444;
      border-radius: 8px;
      padding: 12px;
      font-size: 16px;
      margin: 10px 0;
      width: 100%;
    }
    button {
      background: var(--accent-color);
      color: #fff;
      padding: 10px;
      border: none;
      border-radius: 8px;
      margin: 5px 5px 5px 0;
      font-size: 16px;
      cursor: pointer;
      transition: background 0.2s ease;
    }
    button:hover {
      background: #009e8e;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(70px, 1fr));
      gap: 10px;
      margin-top: 10px;
    }
    canvas {
      background-color: #fff;
      border-radius: 10px;
    }
  </style>
</head>
<body>
  <div class="tabs">
    <div class="tab active" onclick="showTab(0)">Scientific</div>
    <div class="tab" onclick="showTab(1)">Graph</div>
    <div class="tab" onclick="showTab(2)">Loan/Interest</div>
    <div class="tab" onclick="showTab(3)">Converter</div>
  </div>
  <div class="section active" id="scientific-section">
    <h2>Scientific Calculator</h2>
    <input type="text" id="sciInput" placeholder="Enter expression">
    <p id="sciResult"></p>
    <div class="grid" id="sciPad"></div>
  </div>
  <div class="section" id="graph-section">
    <h2>Graph Calculator</h2>
    <input type="text" id="graphInput" placeholder="Enter function of x">
    <button onclick="plotGraph()">Plot</button>
    <canvas id="graphCanvas" width="400" height="300"></canvas>
  </div>
  <div class="section" id="loan-section">
    <h2>Loan / Interest Calculator</h2>
    <input type="number" id="loanPrincipal" placeholder="Principal Amount">
    <input type="number" id="loanRate" placeholder="Annual Interest Rate %">
    <input type="number" id="loanTime" placeholder="Time in Years">
    <select id="loanType">
      <option value="simple">Simple Interest</option>
      <option value="compound">Compound Interest</option>
    </select>
    <p id="loanResult"></p>
    <div class="grid" id="loanPad"></div>
  </div>
  <div class="section" id="converter-section">
    <h2>Converter</h2>
    <h3>Base Converter</h3>
    <input type="text" id="baseInput" placeholder="Enter number">
    <select id="baseFrom">
      <option value="2">Binary</option>
      <option value="8">Octal</option>
      <option value="10" selected>Decimal</option>
      <option value="16">Hexadecimal</option>
    </select>
    <select id="baseTo">
      <option value="2">Binary</option>
      <option value="8">Octal</option>
      <option value="10">Decimal</option>
      <option value="16">Hexadecimal</option>
    </select>
    <button onclick="convertBase()">Convert</button>
    <p id="baseResult"></p><h3>Roman Numerals</h3>
<input type="text" id="romanInput" placeholder="Enter number or Roman numeral">
<button onclick="convertRoman()">Convert</button>
<p id="romanResult"></p>

<h3>Morse Code</h3>
<input type="text" id="morseInput" placeholder="Enter text or Morse">
<button onclick="convertMorse()">Convert</button>
<p id="morseResult"></p>
<div class="grid" id="convertPad"></div>

  </div>
  <script>
    const sections = document.querySelectorAll('.section');
    const tabs = document.querySelectorAll('.tab');
    const ctx = document.getElementById('graphCanvas').getContext('2d');
    let graphChart;function showTab(index) {
  sections.forEach(s => s.classList.remove('active'));
  tabs.forEach(t => t.classList.remove('active'));
  sections[index].classList.add('active');
  tabs[index].classList.add('active');
}

function updateResult(id, value) {
  document.getElementById(id).innerText = `Result: ${Number(value).toLocaleString("en", { maximumFractionDigits: 10 })}`;
}

function appendToInput(id, value) {
  document.getElementById(id).value += value;
}

const buttonLabels = ['7','8','9','/','4','5','6','*','1','2','3','-','0','.','+','(',')','C','='];

function createPad(containerId, inputId, resultId, calculateFn) {
  const grid = document.getElementById(containerId);
  grid.innerHTML = '';
  buttonLabels.forEach(label => {
    const btn = document.createElement('button');
    btn.innerText = label;
    btn.onclick = () => {
      if (label === 'C') document.getElementById(inputId).value = '';
      else if (label === '=') calculateFn();
      else appendToInput(inputId, label);
    };
    grid.appendChild(btn);
  });
}

function calculateScientific() {
  try {
    const result = math.evaluate(document.getElementById('sciInput').value);
    updateResult('sciResult', result);
  } catch (err) {
    document.getElementById('sciResult').innerText = 'Invalid expression';
  }
}

function plotGraph() {
  const expression = document.getElementById('graphInput').value;
  const xValues = [], yValues = [];
  for (let x = -10; x <= 10; x += 0.1) {
    try {
      const y = math.evaluate(expression, { x });
      xValues.push(x);
      yValues.push(y);
    } catch (e) {
      xValues.push(x);
      yValues.push(null);
    }
  }
  if (graphChart) graphChart.destroy();
  graphChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: xValues,
      datasets: [{
        label: `f(x) = ${expression}`,
        data: yValues,
        borderColor: '#00bfa6',
        fill: false,
        tension: 0.1
      }]
    },
    options: {
      scales: {
        x: { title: { display: true, text: 'x' } },
        y: { title: { display: true, text: 'f(x)' } }
      }
    }
  });
}

function calculateLoan() {
  const P = parseFloat(document.getElementById('loanPrincipal').value);
  const R = parseFloat(document.getElementById('loanRate').value) / 100;
  const T = parseFloat(document.getElementById('loanTime').value);
  const type = document.getElementById('loanType').value;
  let A = 0;
  if (type === 'simple') A = P * (1 + R * T);
  else A = P * Math.pow(1 + R, T);
  updateResult('loanResult', A);
}

function convertBase() {
  try {
    const from = parseInt(document.getElementById('baseFrom').value);
    const to = parseInt(document.getElementById('baseTo').value);
    const num = parseInt(document.getElementById('baseInput').value, from);
    document.getElementById('baseResult').innerText = `Result: ${num.toString(to).toUpperCase()}`;
  } catch {
    document.getElementById('baseResult').innerText = 'Invalid input';
  }
}

function convertRoman() {
  const input = document.getElementById('romanInput').value.toUpperCase();
  const romanMap = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1};
  const arabicToRoman = num => {
    let result = '';
    for (let key in romanMap) {
      while (num >= romanMap[key]) {
        result += key;
        num -= romanMap[key];
      }
    }
    return result;
  };
  const romanToArabic = str => {
    let i = 0, result = 0;
    while (i < str.length) {
      if (romanMap[str.substring(i, i+2)]) {
        result += romanMap[str.substring(i, i+2)]; i += 2;
      } else {
        result += romanMap[str[i]]; i++;
      }
    }
    return result;
  };
  let result = isNaN(input) ? romanToArabic(input) : arabicToRoman(parseInt(input));
  document.getElementById('romanResult').innerText = `Result: ${result}`;
}

function convertMorse() {
  const morseCode = {
    A: ".-", B: "-...", C: "-.-.", D: "-..", E: ".", F: "..-.", G: "--.", H: "....",
    I: "..", J: ".---", K: "-.-", L: ".-..", M: "--", N: "-.", O: "---", P: ".--.",
    Q: "--.-", R: ".-.", S: "...", T: "-", U: "..-", V: "...-", W: ".--", X: "-..-",
    Y: "-.--", Z: "--..", 1: ".----", 2: "..---", 3: "...--", 4: "....-", 5: ".....",
    6: "-....", 7: "--...", 8: "---..", 9: "----.", 0: "-----", ' ': '/'
  };
  const reverseMorse = Object.fromEntries(Object.entries(morseCode).map(([k,v])=>[v,k]));
  const input = document.getElementById('morseInput').value.trim();
  const result = input.includes('.') || input.includes('-') ?
    input.split(' ').map(c => reverseMorse[c] || '').join('') :
    input.toUpperCase().split('').map(c => morseCode[c] || '').join(' ');
  document.getElementById('morseResult').innerText = `Result: ${result}`;
}

createPad('sciPad', 'sciInput', 'sciResult', calculateScientific);
createPad('loanPad', 'loanPrincipal', 'loanResult', calculateLoan);
createPad('convertPad', 'baseInput', 'baseResult', convertBase);

  </script>
</body>
</html>
